#jQuery.boilerplate

A simple jQuery plugin boilerplate

##Private vars

+ **instance**: the plugin instance, one per element.
+ **node**: the DOM element.
+ **element**: the jquery element.
+ **settings**: the plugin settings

##Static vars

+ **pluginName**: the name of your plugin. Used in different places in the boilerplate.
+ **plugin**: the plugin object.

##Public methods

###How to call them ?

    $('selector').pluginName('methodName' [, argumentâ€¦]);

###Are they chainables ?
Yes but, if a method is returning something (!== undefined)
the loop on matched elements will be break, the value will be returned, and the chain will break.

###What happened if a method is called before the plugin was initialized ?
The plugin is initialized with default settings and the function is then called.

###Does the boilerplate has predefined methods ?
Yes, there are four predefined methods :

+ **settings**: return a copy of the settings object.
+ **getText**: return translated text.

##Private methods

###How to call them ?
They are in the plugin scope so you call them like any javascript function.

###Does the boilerplate has predefined private methods ?
Yes, there are two :

+ **init**: directly called on plugin instantiation. You are free to put the code to process on instantiation in it.
+ **getText**: return translated text.

##Translations
The plugin store translations in the plugin.langs object. An option value "lang" is used to defined which language to use for an instance.
You get the translate text using the getText method.

##Events
The plugin now use default jQuery method but store special events name in the plugin.events object.